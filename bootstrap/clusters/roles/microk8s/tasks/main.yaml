- name: Free PCI Devices
  block:

    - name: Blacklist nouveau drivers
      ansible.builtin.copy:
        dest: /etc/modprobe.d/blacklist-nouveau.conf
        content: |
          blacklist nouveau
          options nouveau modeset=0
        mode: '0644'

    - name: Ensure initramfs is updated after blacklisting nouveau
      ansible.builtin.command: dracut --force
      args:
        creates: /boot/initramfs-{{ ansible_kernel }}.img
      # notify: Reboot System

    - name: Unbind NVIDIA GPU for passthrough
      ansible.builtin.shell: |
        echo "0000:{{ item.pci_address }}" > /sys/bus/pci/devices/0000:{{ item.pci_address }}/driver/unbind
      vars:
        addresses:
          - pci_address: "02:00.0"
          - pci_address: "02:00.1"
          - pci_address: "04:00.0"
          - pci_address: "04:00.1"
          - pci_address: "82:00.0"
          - pci_address: "82:00.1"
          - pci_address: "83:00.0"
          - pci_address: "83:00.1"
      loop: "{{ addresses }}"
      loop_control:
        loop_var: item
      ignore_errors: true

    - name: Add NVIDIA GPU PCI address to vfio-pci for passthrough
      ansible.builtin.lineinfile:
        path: /etc/modprobe.d/vfio.conf
        line: "options vfio-pci ids=10de:2805,10de:22bd,10de:2204,10de:1aef,"
        create: yes
        mode: '0644'

    - name: Update initramfs for vfio-pci changes
      ansible.builtin.command: dracut --force
      # notify: Reboot System

    # - name: Replace GRUB_CMDLINE_LINUX value
    #   ansible.builtin.lineinfile:
    #     path: /etc/default/grub
    #     regexp: '^GRUB_CMDLINE_LINUX=.*'
    #     line: 'GRUB_CMDLINE_LINUX="rd.lvm.lv=fedora_k8s/root rhgb quiet intel_iommu=on iommu=pt"'
    #     backrefs: true

    # sudo grub2-mkconfig -o /boot/grub2/grub.cfg

- name: Enable Firewall Service
  ansible.builtin.service:
    name: firewalld
    state: started
    enabled: true

- name: Update System Packages
  ansible.builtin.yum:
    name: "*"
    state: latest

- name: Install Required Packages
  ansible.builtin.yum:
    name:
      - libvirt
      - cockpit-machines
    state: latest

- name: Start Libvirtd Service
  ansible.builtin.service:
    name: libvirtd
    state: started
    enabled: true

- name: Create Storage Pool
  block:

    - name: Create Openshift Logical Volume
      community.general.lvol:
        vg: "fedora_k8s"
        lv: "openshift"
        size: "500G"

    - name: Create Ext4 Filesystem
      community.general.filesystem:
        fstype: ext4
        dev: "/dev/fedora_k8s/openshift"

    - name: Create Mount Path 
      ansible.builtin.file:
        path: /mnt/openshift
        state: directory
        mode: '0755'

    - name: Mount Logical Volume
      ansible.posix.mount:
        path: /mnt/openshift
        src: /dev/fedora_k8s/openshift
        fstype: ext4
        opts: defaults
        state: mounted

    - name: Create Data Path
      ansible.builtin.file:
        path: /mnt/openshift/data
        state: directory
        mode: '0755' 

    - name: Define Storage Pool
      community.libvirt.virt_pool:
        command: define
        name: openshift
        autostart: true
        xml: |
          <pool type='dir'>
            <name>openshift</name>
            <target>
              <path>/mnt/openshift/data</path>
            </target>
          </pool>

    - name: Enable Storage Pool
      community.libvirt.virt_pool:
        name: openshift
        state: active
        autostart: true

- name: Create VM
  block: 

    - name: Download Ubuntu 24.04.1 ISO
      ansible.builtin.get_url:
        url: "https://releases.ubuntu.com/24.04.1/ubuntu-24.04.1-live-server-amd64.iso"
        dest: "/tmp/ubuntu-24.04.1-live-server-amd64.iso"
        mode: '0644'

# - name: Virtual Machine Networking
#   block:
#     - name: stuff
