- name: OpenShift GitOps - Ensure GitOps Namespace
  kubernetes.core.k8s:
    host: "{{ api_url }}"
    api_key: "{{ token }}"
    validate_certs: "{{ validate_certs }}"
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ gitops.namespace }}"

- name: OpenShift GitOps - Ensure GitOps Subscription
  community.okd.k8s:
    host: "{{ api_url }}"
    api_key: "{{ token }}"
    validate_certs: "{{ validate_certs }}"
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: "{{ gitops.namespace }}"
        namespace: "openshift-operators"
      spec:
        config:
          env:
          - name: ARGOCD_APPLICATIONSET_CONTROLLER_ENABLE_PROGRESSIVE_SYNCS
            value: "true"
        channel: "{{ gitops.channel }}"
        installPlanApproval: Automatic
        name: "openshift-gitops-operator"
        source: redhat-operators
        sourceNamespace: openshift-marketplace

- name: OpenShift GitOps - Ensure Admin RBAC
  community.okd.k8s:
    host: "{{ api_url }}"
    api_key: "{{ token }}"
    validate_certs: "{{ validate_certs }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: "{{ gitops.namespace }}-cluster-admin-binding"
      subjects:
        - kind: ServiceAccount
          name: "{{ gitops.namespace }}-argocd-application-controller"
          namespace: "{{ gitops.namespace }}"
      roleRef:
        kind: ClusterRole
        name: cluster-admin
        apiGroup: rbac.authorization.k8s.io

- name: OpenShift GitOps - Wait for CRD Exists
  kubernetes.core.k8s_info:
    host: "{{ api_url }}"
    api_key: "{{ token }}"
    validate_certs: "{{ validate_certs }}"
    api_version: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    name: "argocds.argoproj.io"
  register: argocd_crd
  until:
    - argocd_crd.resources is defined
    - argocd_crd.resources | length > 0
  retries: 40
  delay: 30

- name: OpenShift GitOps - Enable Kustomization Helm Patch
  community.okd.k8s:
    host: "{{ api_url }}"
    api_key: "{{ token }}"
    validate_certs: "{{ validate_certs }}"
    definition:
      apiVersion: argoproj.io/v1beta1
      kind: ArgoCD
      metadata:
        name: "{{ gitops.namespace }}"
        namespace: "{{ gitops.namespace }}"
      spec:
        extraConfig:
          resource.customizations: |
            argoproj.io/Application:
              health.lua: |
                hs = {}
                hs.status = "Progressing"
                hs.message = ""
                if obj.status ~= nil then
                  if obj.status.health ~= nil then
                    hs.status = obj.status.health.status
                    if obj.status.health.message ~= nil then
                      hs.message = obj.status.health.message
                    end
                  end
                end
                return hs

            argoproj.io/ApplicationSet:
              health.lua: |
                hs = {}
                hs.status = "Progressing"
                hs.message = "Waiting for all child applications to be healthy"
                if obj.status ~= nil and obj.status.resources ~= nil then
                  local allHealthy = true
                  for i, resource in ipairs(obj.status.resources) do
                    if resource.kind == "Application" and (resource.health == nil or resource.health.status ~= "Healthy" or resource.status ~= "Synced") then
                      allHealthy = false
                      hs.message = "Application " .. resource.name .. " is not healthy or not synced"
                      break
                    end
                  end
                  if allHealthy then
                    hs.status = "Healthy"
                    hs.message = "All child applications are healthy and synced"
                  end
                end
                return hs

            operators.coreos.com/Subscription:
              health.lua: |
                hs = {}
                hs.status = "Progressing"
                hs.message = "Unknown subscription state or upgrade in progress."
                if obj.status ~= nil then 
                  if (obj.status.state == "UpgradePending" or obj.status.state == "AtLatestKnown") then
                    hs.status = "Healthy"
                    hs.message = "Subscription is at specified version."
                  end
                end
                return hs

            batch/v1:
              health.lua: |
                hs = {}
                hs.status = "Progressing"
                hs.message = "Batch job still needs to run or has errors"
                if obj.status ~= nil then
                  if (obj.status.succeeded > 0) then
                    hs.status = "Healthy"
                    hs.message = "Batch job has succeeded without errors"
                  end
                end
                return hs

            external-secrets.io/ExternalSecret:
              health.lua: |
                hs = {}
                hs.status = "Progressing"
                hs.message = "ExternalSecret is still syncing or not yet ready"
                if obj.status ~= nil and obj.status.conditions ~= nil then
                  for i, condition in ipairs(obj.status.conditions) do
                    if condition.type == "Ready" and condition.status == "True" then
                      hs.status = "Healthy"
                      hs.message = "ExternalSecret has been synced successfully"
                    end
                  end
                end
                return hs

            external-secrets.io/PushSecret:
              health.lua: |
                hs = {}
                hs.status = "Progressing"
                hs.message = "PushSecret is not yet synced or still in progress"
                if obj.status ~= nil and obj.status.conditions ~= nil then
                  for i, condition in ipairs(obj.status.conditions) do
                    if condition.type == "Ready" and condition.status == "True" then
                      hs.status = "Healthy"
                      hs.message = "PushSecret synced successfully"
                      return hs
                    end
                  end
                end
                return hs

            apps.gitlab.com/GitLab:
              health.lua: |
                hs = {}
                hs.status = "Progressing"
                hs.message = "GitLab is not yet fully running or still initializing"
                if obj.status ~= nil and obj.status.phase == "Running" then
                  hs.status = "Healthy"
                  hs.message = "GitLab is running and available to accept requests"
                end
                return hs

        controller:
          # Less resource requirements on controller
          diff:
            server:
              side: "true"
          app:
            state:
              cache:
                expiration: "2m0s"
          repo:
            server:
              timeout:
                seconds: "180"
          status:
            processors: "60"
          operation:
            processors: "30"
          # Infinite Retries
          k8sclient:
            retry:
              max: "-1"
          kubectl:
            parallelism:
              limit: "30"
        applicationSet:
          extraCommandArgs:
            - "--enable-progressive-syncs"
        server:
          route:
            enabled: true
          insecure: true
        kustomizeBuildOptions: '--enable-helm'

- name: GitOps - Create Workshop
  community.okd.k8s:
    host: "{{ api_url }}"
    api_key: "{{ token }}"
    validate_certs: "{{ validate_certs }}"
    definition:
      apiVersion: argoproj.io/v1alpha1
      kind: Application
      metadata:
        name: "{{ workshop.chart.name }}-workshop"
        namespace: "{{ gitops.namespace }}"
      spec:
        destination:
          namespace: "{{ gitops.namespace }}"
          server: 'https://kubernetes.default.svc'
        source:
          chart: "{{ workshop.chart.name }}"
          repoURL: "{{ workshop.chart.repo }}"
          version: v3
          targetRevision: "{{ workshop.chart.version }}"
          helm:
            valuesObject: null
        project: default
        timeout: 120
        syncPolicy:
          retry:
            limit: 10
            backoff:
              duration: 5s
              factor: 2
              maxDuration: 30s
          automated:
            prune: false
            selfHeal: true
          managedNamespaceMetadata:
            labels:
              argocd.argoproj.io/managed-by: "{{ gitops.namespace }}"
          syncOptions:
            - CreateNamespace=false
            - Validate=false
  when:
    - workshop.chart.enabled is defined
    - workshop.chart.enabled is true

- name: GitOps - Cluster Generator Secrets
  community.okd.k8s:
    host: "{{ api_url }}"
    api_key: "{{ token }}"
    validate_certs: "{{ validate_certs }}"
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "default-cluster"
        namespace: "openshift-gitops"
        labels:
          argocd.argoproj.io/secret-type: cluster
          cluster: default
          domain: "apps.{{ domain }}"
      stringData:
        config: '{"tlsClientConfig":{"insecure":false}}'
        name: "default"
        nameNormalized: "default"
        server: "https://kubernetes.default.svc"
