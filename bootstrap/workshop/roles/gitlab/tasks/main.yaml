- name: Verify GitLab Web Server is Running
  block:

    - name: Waiting for Verification
      debug:
        msg: "Starting verification of the GitLab Webserver deployment in the gitlab-system namespace."

    - name: Check GitLab Webserver Deployment Status
      community.kubernetes.k8s_info:
        host: "{{ api_url }}"
        api_key: "{{ token }}"
        validate_certs: "{{ validate_certs }}"
        kind: Deployment
        name: "gitlab-webservice-default"
        namespace: "gitlab-system"
      register: gitlab_webserver_status
      until:
        - gitlab_webserver_status.resources | length > 0
        - gitlab_webserver_status.resources[0].status.readyReplicas | default(0) == gitlab_webserver_status.resources[0].status.replicas
      retries: 40
      delay: 30

- name: Clone - Decode Admin Password
  community.kubernetes.k8s_info:
    host: "{{ api_url }}"
    api_key: "{{ token }}"
    validate_certs: "{{ validate_certs }}"
    api_version: v1
    kind: Secret
    name: gitlab-gitlab-initial-root-password
    namespace: "gitlab-system"
  register: gitlab_admin_secret

- name: Decode the secret and register to a variable
  set_fact:
    decoded_secret: "{{ gitlab_admin_secret.resources[0].data.password | b64decode }}"

- name: Clone - Obtain Access Token
  uri:
    url: "https://gitlab.{{ domain }}/oauth/token"
    method: POST
    validate_certs: no
    status_code: 200
    body_format: json
    headers:
        Content-Type: application/json
    body: >
        {
        "grant_type": "password",
        "username": "root",
        "password": "{{ decoded_secret }}"
        }
  register: gitlab_access_token

- name: Decode the secret and register to a variable
  set_fact:
    gitlab_token: "{{ gitlab_access_token.json.access_token }}"

- name: "Create GitLab Group"
  community.general.gitlab_group:
    api_url: https://gitlab.{{ domain }}
    validate_certs: false
    api_username: root
    api_password: "{{ decoded_secret }}"
    name: self-provisioned
    path: self-provisioned
    visibility: "internal"
    auto_devops_enabled: false
    state: present
  register: self_provisioned_group

- name: GIT LAB Groups
  debug:
    msg: "{{ self_provisioned_group }}"

- name: "Creating a group access token"
  community.general.gitlab_group_access_token:
    api_url: https://gitlab.{{ domain }}
    validate_certs: false
    api_username: root
    api_password: "{{ decoded_secret }}"
    group: "self-provisioned"
    name: "self-provisioned"
    expires_at:  "{{ '+%Y-%m-%d' | strftime(ansible_facts.date_time.epoch | int + 60*60*24*90) }}"
    access_level: owner
    recreate: state_change
    scopes:
      - api
      - read_api
      - create_runner
      - k8s_proxy
      - read_repository
      - write_repository
      - read_registry
      - write_registry
      - ai_features
    state: present
  register: group_access_token

- name: Access Token Response
  debug:
    msg: "{{ group_access_token }}"



# - name: Import GitLab - Create Backstage Group Token Access Credentials
#   community.okd.k8s:
#     host: "{{ api_url }}"
#     api_key: "{{ token }}"
#     validate_certs: "{{ validate_certs }}"
#     definition:
#       apiVersion: v1
#       kind: Secret
#       metadata:
#         name: gitlab-group-access-pat
#         namespace: "gitlab-system"
#       data:
#         GITLAB_TOKEN: "{{ gitlabToken | b64encode }}"
#   when: 
#     - tokenID is not defined

# - name: Import GitLab - Push GitLab Token
#   community.okd.k8s:
#     host: "{{ api_url }}"
#     api_key: "{{ token }}"
#     validate_certs: "{{ validate_certs }}"
#     definition:
#       apiVersion: external-secrets.io/v1alpha1
#       kind: PushSecret
#       metadata:
#         name: "gitlab-group-token-secret-priming"
#         namespace: gitlab-system
#       spec:
#         deletionPolicy: Delete
#         refreshInterval: 10s
#         secretStoreRefs:
#           - name: eso-admin-secret-store
#             kind: ClusterSecretStore
#         selector:
#           secret:
#             name: "gitlab-group-access-pat"
#         data:
#           - match:
#               secretKey: "GITLAB_TOKEN"
#               remoteRef:
#                 remoteKey: "gitlab"
#                 property: "group_access_token"


# GITLAB CREATES IS OWN CERT WHILE YOU COULD TECHNICALLY 
# GENERATE YOUR OWN WILDCARD CERT UPDATE ARGOCD AND USE IT
# FOR GITLAB... THIS SHOWS HOW TO FETCH ONE AND PATCH THE ARGOCD-TLS SETTINGS

# OTHER OPTIONS MIGHT BE TO USE KYVERNO
# - name: Get GitLab Wildcard TLS CA Secret
#   community.kubernetes.k8s_info:
#     host: "{{ api_url }}"
#     api_key: "{{ token }}"
#     validate_certs: "{{ validate_certs }}"
#     api_version: v1
#     kind: Secret
#     name: "gitlab-wildcard-tls-ca"
#     namespace: "gitlab-system"
#   register: gitlab_tls_secret

# - name: Decode cfssl_ca from the Secret
#   set_fact:
#     cfssl_ca: "{{ gitlab_tls_secret.resources[0].data.cfssl_ca | b64decode }}"

# - name: Generate ConfigMap YAML from template
#   template:
#     src: configmap.j2
#     dest: /tmp/configmap.yaml

# - name: Apply ArgoCD TLS ConfigMap
#   community.kubernetes.k8s:
#     host: "{{ api_url }}"
#     api_key: "{{ token }}"
#     validate_certs: "{{ validate_certs }}"
#     definition: "{{ lookup('file', '/tmp/configmap.yaml') }}"
#     merge_type:
#       - merge
#   register: patch_result

# - name: Debug Patch Result
#   debug:
#     msg: "ConfigMap patched successfully: {{ patch_result }}"
